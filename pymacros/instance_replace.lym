<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Replace instance cell</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut>Ctrl+Alt+\</shortcut>
 <show-in-menu>true</show-in-menu>
 <group-name>instances</group-name>
 <menu-path>snapper_menu.editing_menu.editing_cells_menu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>'''
instance_replace
snapper v0.0.1
Copyright 2023 Jason Mak

This file is part of snapper.

snapper is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

snapper is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with snapper. If not, see https://www.gnu.org/licenses/. 

-------------

Replace the current selected instance(s) with cell selected in cell hierarchy
'''

import pya

lv = pya.Application.instance().main_window().current_view()
layout = lv.active_cellview().layout()
cell = lv.active_cellview().cell

object_selection = list(lv.object_selection) #important to ensure ordering stays as expected
object_selection = sorted(object_selection, key =lambda x: x.seq)


#get currently selected cell index
cell_paths = lv.selected_cells_paths(lv.active_cellview().index())
selected_cell_indices = [cp[-1] for cp in cell_paths]
selected_cell_index = selected_cell_indices[0]

lv.transaction("replace instance with selected cell")

for sel_obj in object_selection:
  if sel_obj.is_cell_inst():
    sel_obj.inst().cell_index = selected_cell_index

lv.commit()</text>
</klayout-macro>
