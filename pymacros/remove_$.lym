<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Rename to base (remove $)</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut>Ctrl+Alt+R</shortcut>
 <show-in-menu>true</show-in-menu>
 <group-name>instances</group-name>
 <menu-path>snapper_menu.editing_menu.editing_cells_menu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>'''
remove_$
snapper v 0.0.1
Copyright 2023 Jason Mak

This file is part of snapper.

snapper is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

snapper is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with snapper. If not, see https://www.gnu.org/licenses/. 

-------------

Assumptions
----------
In the cell hierarchy, no base cell variant exists.

e.g. 
CELL$1 is in the layout, but not CELL


Inputs
----------
Selection (multiple) of cell in cell hierarchy viewer, with a cell name including $

Behaviour
----------
Remove $ from cell names where a base variant does not exist.

If no base variant of the cell name exists, renames the selected cell name to the base variant


See also
----------
merge_cell_variants_keep_new
merge_cell_variants_keep_old

'''

import pya


lv = pya.Application.instance().main_window().current_view()
ly = lv.active_cellview().layout()
cell_active = lv.active_cellview().cell #currently active cell

#get the all selected cells
cell_paths = lv.selected_cells_paths(lv.active_cellview().index())

#cell indices of all the selected cells
selected_cell_indices = [cp[-1] for cp in cell_paths]

for selected_cell_index in selected_cell_indices:

  #get all instances of the selected cell
  selected_cell = ly.cell(selected_cell_index)
  selected_cell_name = selected_cell.name
  
  if "$" in selected_cell_name:
    base_cell_name = selected_cell_name[:selected_cell_name.find("$")]
    
    #check if a cell with base_cell_name exists, if we have a $ variant but no base cell, promote the variant to base cell
    if not ly.has_cell(base_cell_name):

################
# TRANSACTION
################
    
      lv.transaction("rename to base (remove $)")
      
      ly.rename_cell(selected_cell_index, base_cell_name)
      
      #check if the current cellview is still valid
      if not lv.active_cellview().is_valid():
        lv.active_cellview().cell_index = ly.cell(base_cell_name).cell_index() #adjust to the new cell index
      
      assert(lv.active_cellview().is_valid())
      
      lv.commit()</text>
</klayout-macro>
