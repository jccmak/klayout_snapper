<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Add bounding box covering shapes</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut>=</shortcut>
 <show-in-menu>true</show-in-menu>
 <group-name>box</group-name>
 <menu-path>snapper_menu.editing_menu.editing_box_menu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>'''
add_bounding_box
snapper v 0.0.1
Copyright 2023 Jason Mak
This file is part of snapper.

snapper is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

snapper is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with snapper. If not, see https://www.gnu.org/licenses/. 


Cover a selection of objects with a covering bounding box of the selected layers

Assumptions
----------

Inputs
----------

Selected objects


Behaviour
----------
Cover the selection of objects with a covering bounding box of the selected layers


See also
----------
add_bounding_boxes

'''

## TO BE REWRITTEN USING pya.Region

import pya

lv = pya.Application.instance().main_window().current_view()
ly = pya.CellView.active().layout()
mw = pya.Application.instance().main_window()
#cell = pya.CellView.active().cell

selected_layers = [it.current().layer_index() for it in lv.selected_layers()] #_layer.current().layer_index()

object_selection = lv.object_selection

#to be rewritten with pya.Region

if len(object_selection)&gt;0:
  selected_object = object_selection[0]
  bbox = selected_object.shape.bbox()
  
  x1, x2, y1, y2 = bbox.p1.x, bbox.p2.x, bbox.p1.y, bbox.p2.y
  
  for selected_object in object_selection[1:]:
  
    #for objects selected from the top cell
    bbox = selected_object.shape.bbox()

    
    x1 = min(bbox.p1.x, x1)
    y1 = min(bbox.p1.y, y1)
    
    x2 = max(bbox.p2.x, x2)
    y2 = max(bbox.p2.y, y2)

    
  cell = pya.CellView.active().cell
  box = pya.Box(x1, y1, x2, y2)
  
#################
# Transaction
#################
 
  lv.transaction("selection bounding box")  
  if selected_layers:
    for layer in selected_layers:
      cell.shapes(layer).insert(box)
  lv.commit()
</text>
</klayout-macro>
