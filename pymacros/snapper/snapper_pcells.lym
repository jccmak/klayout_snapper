<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>true</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>'''
snapper_pcells

snapper v0.0.1
Copyright 2023 Jason Mak
This file is part of snapper.

snapper is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

snapper is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with snapper. If not, see https://www.gnu.org/licenses/. 

-------------

'''

import pya
import math
import numpy as np


class ArrayPath(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the circle
  """

  def __init__(self):

    # Important: initialize the super class
    super(ArrayPath, self).__init__()
    
    path = pya.DPath()
    path.points = [pya.DPoint(0, 0), pya.DPoint(10,0), pya.DPoint(0,10)] #need to get individual values to avoid rounding
    path.width = 1

    # declare the parameters
    self.param("l", self.TypeLayer, "Layer", default = pya.LayerInfo(1, 0))
    self.param("s", self.TypeShape, "", default = path) #for custom PCell, shape param shouldn't override self.path
    self.param("N", self.TypeInt, "N", default = 3)
    #self.param("sp", self.TypeDouble, "Spacing", default = 10)
    self.param("sp2", self.TypeList, "Spacing(s)", default = [10])
    self.param("w",self.TypeDouble, "Width", default = 1)
    self.param("o",self.TypeDouble, "Center Offset", default = 0)

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    if len(self.sp2) == 1:
      return "ArrayPath(L=%s, N=%d, sp=%s)"%(str(self.l), self.N, self.sp2[0])#
    else:
      return "ArrayPath(L=%s, N=%d, sp=%s)"%(str(self.l), self.N, self.sp2)#
  def coerce_parameters_impl(self): #this makes sure
  
    # We employ coerce_parameters_impl to decide whether the handle or the 
    # numeric parameter has changed (by comparing against the effective 
    # radius ru) and set ru to the effective radius. We also update the 
    # numerical value or the shape, depending on which on has not changed.
    pass
  
  def can_create_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we can use any shape which 
    # has a finite bounding box
    return self.shape.is_box() or self.shape.is_polygon() or self.shape.is_path()
  
  def parameters_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we set r and l from the shape's 
    # bounding box width and layer
    #self.r = self.shape.bbox().width() * self.layout.dbu / 2
    dbu = self.layout.dbu
    self.l = self.layout.get_info(self.layer)
    
    if self.shape.is_path():
      path = pya.DPath()
      path.points = [pya.DPoint(pp.x*dbu, pp.y*dbu) for pp in self.shape.path.each_point()] #need to get individual values to avoid rounding
      path.width = 1    
      self.s = path

  
  def transformation_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we use the center of the shape's
    # bounding box to determine the transformation
    return pya.Trans()#self.shape.bbox().center())
    
  def intersect_lines(self, a0, a1, b0, b1):
    '''
    assumes a0, a1, b0, b1 are pya.Point
  
    a0 + a1*u = b0 + b1*v
    
    a0 - b0 = [a1 b1][-u v]T
    
    [a1 b1]^-1 (a0 - b0) = [-u v]T
    
    '''
    
    
    a0x, a0y = a0.x, a0.y
    b0x, b0y = b0.x, b0.y
    b1x, b1y = b1.x, b1.y
    a1x, a1y = a1.x, a1.y
    
    det = (a1x*b1y) - (a1y*b1x)
    cx = a0x - b0x
    cy = a0y - b0y
    u = -(b1y*cx - b1x*cy)/det
    
    return (a0x+(a1x*u), a0y+(a1y*u))
    
  def produce_impl(self):
  
    # This is the main part of the implementation: create the layout
    
    path = self.s
    dbu = self.layout.dbu
    
    centerline = list(path.each_point())
    edges = list(zip(centerline[:-1],centerline[1:]))

    #directions = [e[0] - e[1] for e in edges]
    #directions_orth = [pya.Vector(-d.y, d.x) for d in directions]
    #directions_orth_norm = [do/(do.length()) for do in directions_orth]
    
    N = int(self.N)
    #sp = self.sp
    o = self.o
    sp2 = self.sp2
    #print(sp2)
    
    #parse the spacing list
    
    #try to format everything in spacings into float. If invalid, delete
    spacings = []
    for v in sp2:
      try:
        v_float = float(v)
      except:
        v_float = None
      if not v_float is None:
        spacings.append(v_float)
    
    if len(spacings) == 0: #null list or ill formatted
      spacings = [self.w]*N
    elif len(spacings) &lt; len(edges):
      extra = [spacings[-1]]*(len(edges) - len(sp2))
      spacings = spacings + extra
      
    #if same length or longer, then the loop index will automatically stop before we use up all the spacings
    
    
    for jj in range(N):
      displaced_edges = []
      
      for ii in range(len(edges)):
        sp = spacings[ii]
        e = edges[ii]
        d = e[0] - e[1]
        d_o = pya.Vector(-d.y, d.x)
        d_o_n = d_o*(1./d_o.length())
        #print(d_o_n, d_o_n.length())

        p1_disp = e[0] + d_o_n*(sp*(jj - (N-1)/2.)+ o)/d_o_n.length()
        p2_disp = e[1] + d_o_n*(sp*(jj - (N-1)/2.)+ o)/d_o_n.length()
        
        displaced_edges.append((p1_disp, p2_disp))
      
      path_points = []
      
      for ii in range(len(displaced_edges)):
        de = displaced_edges[ii]
        
        if ii == 0:
          path_points.append(de[0])
        
        if ii&lt;len(displaced_edges) - 1:
          de_n = displaced_edges[ii+1]
          p_n = pya.DPoint(*self.intersect_lines(de[0], de[1] - de[0], de_n[0], de_n[1] - de_n[0]))
        else:
          p_n = de[1]
        path_points.append(p_n)
      
      new_path = pya.DPath()
      new_path.points = path_points#[pya.DPoint(p) for p in path_points]
      new_path.width = self.w
      self.cell.shapes(self.l_layer).insert(new_path) 

'''
  #get points from path
    coords = [(pp.x, pp.y) for pp in path.each_point()]
    pairs = [np.array([coords[i], coords[i+1]]) for i in range(len(coords)-1)]
    #print(pairs)
    directions = [p[1] - p[0] for p in pairs]
    lengths = [np.linalg.norm(d) for d in directions]
    directions_norm = [d/l for d,l in zip(directions, lengths)]
    tangents_norm = [np.array([-d[1], d[0]]) for d in directions_norm] #follow right hand rule
    
    
    t_list = []
    for i in range(len(coords)):
        if i == 0:
            t_list.append(tangents_norm[0])
        elif i&gt;=len(coords)-1:
            t_list.append(tangents_norm[-1])
        else:
            t = (tangents_norm[i-1] + tangents_norm[i])/2
            t_norm = np.linalg.norm(t)
    ##        pdb.set_trace()
            t = t/(t_norm)**2
            t_list.append(t)
    
    ##t_norm = np.copy()
    ##
    ##tangents_norm = tangents_norm.insert(0, tangents_norm[0])
    ##tangents_norm.append(tangents_norm[-1])
    
    N = self.N
    spacing = self.sp
    
    array_coords = []
    
    current_line = []
    for i in range(N):
        offset = -spacing*(N-1.)/2. + i*spacing + self.o
        current_line = []
        for j in range(len(coords)):
            current_line.append(coords[j] + t_list[j]*offset)
        array_coords.append(np.array(current_line))
        
    for line in array_coords:
      new_path = pya.DPath()
      new_path.points = [pya.DPoint(x,y) for x,y in line]
      new_path.width = self.w
      self.cell.shapes(self.l_layer).insert(new_path)    
'''

class ArrayPathMulti(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the circle
  """

  def __init__(self):

    # Important: initialize the super class
    super(ArrayPathMulti, self).__init__()
    
    #path = pya.DPath()
    #path.points = [pya.DPoint(0, 0), pya.DPoint(10,0), pya.DPoint(0,10)] #need to get individual values to avoid rounding
    #path.width = 1

    # declare the parameters
    self.param("l", self.TypeLayer, "Layer", default = pya.LayerInfo(1, 0))
    self.param("s", self.TypeShape, "", default = pya.DBox(0,0,1,1)) #for custom PCell, shape param shouldn't override self.path
    self.param("N", self.TypeInt, "N", default = 3)
    self.param("spA", self.TypeDouble, "Spacing A", default = 10)
    self.param("spB", self.TypeDouble, "Spacing B", default = 10)
    self.param("w",self.TypeDouble, "Width", default = 1)
    self.param("o",self.TypeDouble, "Center Offset", default = 0)

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "ArrayBendPath(L=%s, N=%d, spA=%0.4f, spB=%0.4f)"%(str(self.l), self.N, self.spA, self.spB)#
  
  def coerce_parameters_impl(self): #this makes sure
  
    # We employ coerce_parameters_impl to decide whether the handle or the 
    # numeric parameter has changed (by comparing against the effective 
    # radius ru) and set ru to the effective radius. We also update the 
    # numerical value or the shape, depending on which on has not changed.
    pass
  
  def can_create_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we can use any shape which 
    # has a finite bounding box
    return self.shape.is_box() #or self.shape.is_polygon() or self.shape.is_path()
  
  def parameters_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we set r and l from the shape's 
    # bounding box width and layer
    #self.r = self.shape.bbox().width() * self.layout.dbu / 2
    dbu = self.layout.dbu
    self.l = self.layout.get_info(self.layer)
    
    if self.shape.is_box():
    
      #p1 = self.shape.box.p1
      #p2 = self.shape.box.p2
      #path = pya.DPath()
      #path.points = [pya.DPoint(pp.x*dbu, pp.y*dbu) for pp in self.shape.path.each_point()] #need to get individual values to avoid rounding
      #path.width = 1    
      #self.s = path
      
      self.s = self.shape.box

  
  def transformation_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we use the center of the shape's
    # bounding box to determine the transformation
    return pya.Trans()#self.shape.bbox().center())
  
  def produce_impl(self):
  
    # This is the main part of the implementation: create the layout
    
    box = self.s
    dbu = self.layout.dbu

  #get points from path
    p1 = box.p1
    p2 = box.p2
    pc = pya.DPoint(p2.x, p1.y)
    
    #main bend
    #coords = [(p1.x, p1.y), (p2.x, p1.y), (p2.x, p2.y)]#
    coords = [p1, pc, p2]
    pairs = [(coords[i], coords[i+1]) for i in range(len(coords)-1)]#[np.array([coords[i], coords[i+1]]) for i in range(len(coords)-1)]
    #print(pairs)
    directions = [p[1] - p[0] for p in pairs]
    #lengths = [d.length() for d in directions]#math.sqrt(d[0]#[np.linalg.norm(d) for d in directions]
    directions_norm = [d/d.length() for d in directions]
    tangents_norm = [pya.DVector(-d.y, d.x) for d in directions_norm] #follow right hand rule
    
    
    t_list = []
    for i in range(len(coords)):
        if i == 0:
            t_list.append(tangents_norm[0])
        elif i&gt;=len(coords)-1:
            t_list.append(tangents_norm[-1])
        else:
            t = (tangents_norm[i-1] + tangents_norm[i])/2
            t_norm = t.length()#np.linalg.norm(t)
    ##        pdb.set_trace()
            t = t/(t_norm)**2
            t_list.append(t)
    
    ##t_norm = np.copy()
    ##
    ##tangents_norm = tangents_norm.insert(0, tangents_norm[0])
    ##tangents_norm.append(tangents_norm[-1])
    
    N = self.N
    #spacing = self.sp
    
    array_coords = []
    spacing_list = [self.spA, self.spA + self.spB, self.spB]
    current_line = []
    for i in range(N):
        current_line = []
        for j in range(len(coords)):
            spacing = spacing_list[j]
            offset = -spacing*(N-1.)/2. + i*spacing + self.o
            current_line.append(coords[j] + t_list[j]*offset)
        array_coords.append(current_line)
        
    for line in array_coords:
      new_path = pya.DPath()
      new_path.points = line#[pya.DPoint(x,y) for x,y in line]
      new_path.width = self.w
      self.cell.shapes(self.l_layer).insert(new_path)

class ClearancePath(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the circle
  """

  def __init__(self):

    # Important: initialize the super class
    super(ClearancePath, self).__init__()
    
    bendradius_str = pya.Application.instance().get_config('bend-radius')
    bendradius_float = 0
    try:
      bendradius_float = float(bendradius_str)
    except:
      pass
      


    wgcl_str = pya.Application.instance().get_config('wg-clearance')
    wgcl_float = 0
    try:
      wgcl_float = float(wgcl_str)
    except:
      pass
      
      
    portlayer_str = pya.Application.instance().get_config('port-layer')
    portlayer_int = 0
    try:
      portlayer_int = int(portlayer_str)
    except:
      pass        

    # declare the parameters
    self.param("l", self.TypeLayer, "Layer", default = pya.LayerInfo(1, 0)) #extracted from inherited path
    self.param("lc", self.TypeLayer, "Clearance Layer", default = pya.LayerInfo(portlayer_int, 0)) #from config

    self.param("s", self.TypeShape, "", default = pya.DPath([pya.DPoint(0,0), pya.DPoint(1, 0), pya.DPoint(1,1)], 1)) #extracted from inherited path
    #self.param("f", self.TypeDouble, "Transition Fraction", default = 0.34)
    self.param("radius",self.TypeDouble, "Radius", default = bendradius_float) #from config
    self.param("w", self.TypeDouble, "Width", default = 1) #inherited
    
    self.param("c", self.TypeDouble, "Clearance", default = wgcl_float) #inherited
    
    #self.param("n", self.TypeInt, "Number of points", default = 64)     
    # this hidden parameter is used to determine whether the radius has changed
    # or the "s" handle has been moved
    
    #self.param("fu", self.TypeDouble, "Transition Fraction", default = 0.0, hidden = True)
    #self.param("fd", self.TypeDouble, "Double Transition Fraction", readonly = True)

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "ClearancePath(L=" + str(self.l) + ",r=" + ('%.3f' % self.radius) + ")"
  
  def coerce_parameters_impl(self): #this makes sure
  
    # We employ coerce_parameters_impl to decide whether the handle or the 
    # numeric parameter has changed (by comparing against the effective 
    # radius ru) and set ru to the effective radius. We also update the 
    # numerical value or the shape, depending on which on has not changed.
    pass
  
  def can_create_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we can use any shape which 
    # has a finite bounding box
    return self.shape.is_path()#self.shape.is_box() or self.shape.is_polygon() or self.shape.is_path()
  
  def parameters_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we set r and l from the shape's 
    # bounding box width and layer
    #self.r = self.shape.bbox().width() * self.layout.dbu / 2

    dbu = self.layout.dbu
    self.l = self.layout.get_info(self.layer)
    self.w = self.shape.path.width*dbu
    
    if self.shape.is_path():
      path = pya.DPath()
      path.points = [pya.DPoint(pp.x*dbu, pp.y*dbu) for pp in self.shape.path.each_point()] #need to get individual values to avoid rounding
      path.width = self.shape.path.width*dbu    
      self.s = path  #update guiding shape

  
  def transformation_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we use the center of the shape's
    # bounding box to determine the transformation
    return pya.Trans()# no transform#pya.Trans(self.shape.bbox().center())
  
  def produce_impl(self):
  
    # This is the main part of the implementation: create the layout
    
    ly = self.layout
    
    path = self.s
    radius = self.radius
    
    #segments, corners, boxes = segment_path_corners(path, self.radius)

    #points of the current path
    points = [pp for pp in path.each_point()]
    
    pp_prev = None
    pp_cur = None
    pp_next = None
    
    segments = []
    seg_cur = []
    
    corners = []
    boxes = []
    
    #crawl along the path
    for i in range(len(points)):
      #print('----')
      #print(pp_prev)
      #print(pp_cur)
      #print(pp_next)
      
    
      pp_cur = points[i]
      if i+1&lt;len(points):
        pp_next = points[i+1]
      else:
        pp_next = None
        
        
      #check if this is a corner
      if not (pp_prev is None or pp_next is None):
        v_p = pp_cur - pp_prev
        v_n = pp_next - pp_cur
        is_corner = ((abs(v_p.sprod(v_n)) == 0))
        has_space = (v_p.length()&gt;=radius) and (v_n.length()&gt;=radius) #path and radius should be in same units
      else:
        is_corner = False
  
      pp_prev = pp_cur
      #print(is_corner)
  
      if is_corner:
        if has_space:    
          #if it's a corner segment, draw a polygon indicating the corner when possible
          #this is a valid corner
          p1 = pp_cur
          p0 = p1 - radius*v_p/v_p.length()
          p2 = p1 + radius*v_n/v_n.length()
          
          #poly = pya.Polygon([p0, p1, p2])
          #topcell.shapes(layer_idx).insert(poly)
          corners.append([p0, p1, p2])
          
          #adjust the next previous value
          pp_prev = p2
          #make a new segment
          seg_cur.append(p0)
          segments.append(seg_cur)
          seg_cur = [p2]
        else:
  
          p1 = pp_cur
          p0 = p1 - type(p1)(radius, radius)
          p2 = p1 + type(p1)(radius, radius)
          
          #box = pya.Box(p0, p2)# 
          #topcell.shapes(layer_idx).insert(box) #shows the clearance for the path
          boxes.append([p0,p1,p2])
          #don't make a new segment
          seg_cur.append(p1)
      else:
        seg_cur.append(pp_cur)
      
    segments.append(seg_cur) #append the final segment


    for seg in segments:
      seg_path = pya.DPath(seg, self.w)
      self.cell.shapes(self.l_layer).insert(seg_path)
    
    if self.c&gt;0:
      for seg in segments:
        seg_path = pya.DPath(seg, self.w + 2*self.c)
        self.cell.shapes(self.lc_layer).insert(seg_path)

    for corner in corners:
      corner_poly = pya.DPolygon(corner)
      self.cell.shapes(self.l_layer).insert(corner_poly)
    for bb in boxes:
      box = pya.DBox(bb[0], bb[-1])
      self.cell.shapes(self.l_layer).insert(box)    


class SBendPath(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the circle
  """

  def __init__(self):

    # Important: initialize the super class
    super(SBendPath, self).__init__()
    


    # declare the parameters
    self.param("l", self.TypeLayer, "Layer", default = pya.LayerInfo(1, 0))
    self.param("s", self.TypeShape, "", default = pya.DBox(0., 0., 15., 5.))
    self.param("f", self.TypeDouble, "Transition Fraction", default = 0.34)
    self.param("w",self.TypeDouble, "Width", default = 1)
    #self.param("n", self.TypeInt, "Number of points", default = 64)     
    # this hidden parameter is used to determine whether the radius has changed
    # or the "s" handle has been moved
    
    #self.param("fu", self.TypeDouble, "Transition Fraction", default = 0.0, hidden = True)
    #self.param("fd", self.TypeDouble, "Double Transition Fraction", readonly = True)

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "SBendPath(L=" + str(self.l) + ",f=" + ('%.3f' % self.f) + ")"
  
  def coerce_parameters_impl(self): #this makes sure
  
    # We employ coerce_parameters_impl to decide whether the handle or the 
    # numeric parameter has changed (by comparing against the effective 
    # radius ru) and set ru to the effective radius. We also update the 
    # numerical value or the shape, depending on which on has not changed.
    pass
  
  def can_create_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we can use any shape which 
    # has a finite bounding box
    return self.shape.is_box() or self.shape.is_polygon() or self.shape.is_path()
  
  def parameters_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we set r and l from the shape's 
    # bounding box width and layer
    #self.r = self.shape.bbox().width() * self.layout.dbu / 2
    self.l = self.layout.get_info(self.layer)
    
    shape_bbox = self.shape.bbox()
    dbu = self.layout.dbu
    p1, p2 = shape_bbox.p1, shape_bbox.p2
    width = shape_bbox.width()*dbu
    height = shape_bbox.height()*dbu
    
    #new_box = pya.DBox(p1.x*dbu, p1.y*dbu, p2.x*dbu, p2.y*dbu)
    new_box = pya.DBox(-width/2.,-height/2.,width/2., height/2.)
    
    self.s = new_box

  
  def transformation_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we use the center of the shape's
    # bounding box to determine the transformation
    return pya.Trans(self.shape.bbox().center())
  
  def produce_impl(self):
  
    # This is the main part of the implementation: create the layout
    
    s = self.s
    width = s.width() #/ self.layout.dbu
    height = s.height()#/ self.layout.dbu
    
   # print(width)
   # print(height)
    
    p1 = s.p1
    p2 = s.p2
    
    p1a = pya.DPoint(p1.x + width*(0.5 - self.f/2.), p1.y)
    p2a = pya.DPoint(p2.x - width*(0.5 - self.f/2.), p2.y)
    

    path = pya.DPath()
    path.points = [p1, p1a, p2a, p2] #need to get individual values to avoid rounding
    path.width = self.w

    self.cell.shapes(self.l_layer).insert(path)


class Marker(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the circle
  """

  def __init__(self):

    # Important: initialize the super class
    super(Marker, self).__init__()
    


    # declare the parameters
    self.param("l", self.TypeLayer, "Layer", default = pya.LayerInfo(1, 0))
    self.param("s", self.TypeShape, "", default = pya.DPoint(0., 0.))
    #self.param("f", self.TypeDouble, "Transition Fraction", default = 0.34)
    self.param("w",self.TypeDouble, "Width", default = 1)
    #self.param("n", self.TypeInt, "Number of points", default = 64)     
    # this hidden parameter is used to determine whether the radius has changed
    # or the "s" handle has been moved
    
    #self.param("fu", self.TypeDouble, "Transition Fraction", default = 0.0, hidden = True)
    #self.param("fd", self.TypeDouble, "Double Transition Fraction", readonly = True)

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Marker(W=" + "%.4f"%(float(self.w)) +")"
  
  def coerce_parameters_impl(self): #this makes sure
  
    # We employ coerce_parameters_impl to decide whether the handle or the 
    # numeric parameter has changed (by comparing against the effective 
    # radius ru) and set ru to the effective radius. We also update the 
    # numerical value or the shape, depending on which on has not changed.
    pass
  
  def can_create_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we can use any shape which 
    # has a finite bounding box
    return self.shape.is_box() or self.shape.is_polygon() or self.shape.is_path()
  
  def parameters_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we set r and l from the shape's 
    # bounding box width and layer
    #self.r = self.shape.bbox().width() * self.layout.dbu / 2
    self.l = self.layout.get_info(self.layer)
    
    shape_bbox = self.shape.bbox()
    dbu = self.layout.dbu
    p1, p2 = shape_bbox.p1, shape_bbox.p2
    width = shape_bbox.width()*dbu
    height = shape_bbox.height()*dbu
    
    #new_box = pya.DBox(p1.x*dbu, p1.y*dbu, p2.x*dbu, p2.y*dbu)
    new_point = pya.DPoint(0,0) #shape_bbox.center() #pya.DPoint(-width/2.,-height/2.,width/2., height/2.)
    
    self.s = new_box

  
  def transformation_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we use the center of the shape's
    # bounding box to determine the transformation
    return pya.Trans(self.shape.bbox().center())
  
  def produce_impl(self):
  
    # This is the main part of the implementation: create the layout
    
    s = self.s
    width = self.w# / self.layout.dbu#s.width() #/ self.layout.dbu
    height = self.w#/ self.layout.dbu#/ self.layout.dbu
    
   # print(width)
   # print(height)
    
    p1 =  pya.DPoint(-width/2., 0)
    p2 = pya.DPoint(width/2., 0)
    p3 = pya.DPoint(0, width/2.)
    p4 = pya.DPoint(0, -width/2.)


    poly = pya.DPolygon([p1, p2, p3, p4])
#    poly.points =  #need to get individual values to avoid rounding
    #path.width = self.w

    self.cell.shapes(self.l_layer).insert(poly)

class MyLib(pya.Library):
  """
  The library where we will put the PCell into 
  """

  def __init__(self):
    super(MyLib,self).__init__()
  
    # Set the description
    self.description = "Snapper Library"
    
    # Create the PCell declarations
    #self.layout().register_pcell("Circle", Circle())
    self.layout().register_pcell("SBendPath", SBendPath())
    self.layout().register_pcell("ArrayPath", ArrayPath())
    #self.layout().register_pcell("ArrayBendPath", ArrayBendPath())
    self.layout().register_pcell("ClearancePath", ClearancePath())
    self.layout().register_pcell("Marker", Marker())
    # That would be the place to put in more PCells ...
    
    # Register us with the name "MyLib".
    # If a library with that name already existed, it will be replaced then.
    
    self.register("SnapperLib") 
    
#there is some bug: to refresh parameters of the PCells, need to change name of the registered library and back


# Instantiate and register the library
MyLib()</text>
</klayout-macro>
